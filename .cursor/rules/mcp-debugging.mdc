---
description: 
globs: 
alwaysApply: true
---
## Debugging mcp-teleport via mcp-debug

mcp-debug provides core debugging tools to test and explore the functionality implemented in the aggregated MCP server. This guide focuses on mcp-debugs internal debugging capabilities.

## Core Debugging Tools

mcp-debug exposes these categories of internal tools for debugging the aggregated mcp server end-to-end:

list_tools: list all the tools exposed by the aggregated mcp server
describe_tool: describe a tool exposed by the aggregated mcp server
call_tool: execute a tool exposed by the aggregated mcp server

## Debugging Workflow

### 1. Verify All Services Are Running
Start by checking the overall health of the system:
```
mcp_mcp-debug_call_tool(name="core_service_list", arguments={})
```

### 2. Check MCP Server Registration
Verify that all expected MCP servers are properly registered with the aggregator:
```
mcp_mcp-debug_call_tool(name="core_mcp_server_list", arguments={})
```

### 5. Troubleshoot Connection Issues
If a service shows as unhealthy:
1. Check its detailed status: `core_service_status`
2. Try restarting it: `core_service_restart`
3. Check if its MCP client is attached in the service list

## Important Notes

- The prefix `x_` is configurable via `EnvctlPrefix` in the aggregator config
- Tool names from individual MCP servers get prefixed to avoid conflicts
- The agent automatically handles tool name resolution and routing
- Service health is continuously monitored and reflected in the status
- Workflows provide a way to test complex multi-step operations

## Common Issues and Solutions

**"CallTool not implemented" errors**
- This means the MCP client is not properly attached to the service
- Check `core_service_list` to see if the service shows a client
- The fix involves ensuring `GetServiceData()` returns the MCP client

**Service shows as unhealthy**
- Check logs in the mcp-teleport TUI (if available)
- Use `core_service_status` for detailed information
- Try `core_service_restart` to recover

**Workflow validation fails**
- Use `core_workflow_validate` to check syntax
- Ensure tool names exist (check with `mcp_mcp-debug_list_tools`)
- Verify argument schemas match the tool requirements
